{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNAsCLX1aEkp7XEc3e7GXYp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/miicha007/kmm.19/blob/main/saod1.cs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z2APFp08Dy6Y"
      },
      "source": [
        "using System;\r\n",
        "using System.Collections.Generic;\r\n",
        "using System.Linq;\r\n",
        "using System.Text;\r\n",
        "using System.Threading.Tasks;\r\n",
        "\r\n",
        "namespace ConsoleApp1\r\n",
        "{\r\n",
        "    class Matrix\r\n",
        "    {\r\n",
        "        int n;\r\n",
        "        int[,] mas;\r\n",
        "        public Matrix(int n)\r\n",
        "        {\r\n",
        "            this.n = n;\r\n",
        "            mas = new int[n, n];\r\n",
        "            Random r = new Random();\r\n",
        "            for(int i = 0; i < n;i++)\r\n",
        "            {\r\n",
        "                for (int j = 0; j < n; j++)\r\n",
        "                {\r\n",
        "                    if (r.Next(100) < 70)\r\n",
        "                    {\r\n",
        "                        mas[i, j] = 0;\r\n",
        "                    }\r\n",
        "                    else\r\n",
        "                    {\r\n",
        "                        mas[i, j] = 1;\r\n",
        "                    }\r\n",
        "                }\r\n",
        "            }\r\n",
        "        }\r\n",
        "        public void Fill(int x, int y ,int c,int f)\r\n",
        "        {\r\n",
        "            if(x>=0 && x<n && y >=0 && y < n && mas[x, y] == f)\r\n",
        "            {\r\n",
        "                mas[x, y] = c;\r\n",
        "                Fill(x-1, y, c, f);\r\n",
        "                Fill(x, y-1, c, f);\r\n",
        "                Fill(x+1, y, c, f);\r\n",
        "                Fill(x, y+1, c, f);\r\n",
        "\r\n",
        "            }\r\n",
        "        }\r\n",
        "        public void Print()\r\n",
        "        {\r\n",
        "            string st = \"\";\r\n",
        "            for (int i = 0; i < n; i++)\r\n",
        "            {\r\n",
        "                for (int j = 0; j < n; j++)\r\n",
        "                {\r\n",
        "                    st+=mas[i, j].ToString();\r\n",
        "                }\r\n",
        "                st += \"\\n\";\r\n",
        "            }\r\n",
        "            Console.WriteLine(st);\r\n",
        "        }\r\n",
        "        public Dictionary<int, int> Count()\r\n",
        "        {\r\n",
        "            Dictionary<int, int> dict = new Dictionary<int, int>();\r\n",
        "            for (int i = 0; i < n; i++)\r\n",
        "            {\r\n",
        "                for (int j = 0; j < n; j++)\r\n",
        "                {\r\n",
        "                    if (dict.ContainsKey(mas[i, j]))\r\n",
        "                    {\r\n",
        "                        dict[mas[i, j]] += 1;\r\n",
        "                    }\r\n",
        "                    else\r\n",
        "                    {\r\n",
        "                        dict.Add(mas[i, j], 1);\r\n",
        "                    }\r\n",
        "                }\r\n",
        "            }\r\n",
        "            return dict;\r\n",
        "        }\r\n",
        "    }\r\n",
        "    class Program\r\n",
        "    {\r\n",
        "        static void Main(string[] args)\r\n",
        "        {\r\n",
        "            Matrix m = new Matrix(1000);\r\n",
        "            //m.Print();\r\n",
        "            m.Fill(0, 1, 5, 0);\r\n",
        "            //m.Print();\r\n",
        "            var dict = m.Count();\r\n",
        "            foreach (int c in dict.Keys)\r\n",
        "            {\r\n",
        "                Console.WriteLine(\"{0} - {1}\",c, dict[c]);\r\n",
        "            }\r\n",
        "            Console.ReadKey();\r\n",
        "\r\n",
        "        }\r\n",
        "    }\r\n",
        "}\r\n"
      ],
      "execution_count": 2,
      "outputs": []
    }
  ]
}